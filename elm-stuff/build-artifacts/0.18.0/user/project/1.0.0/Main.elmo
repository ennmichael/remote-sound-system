var _user$project$Main$errorDiv = function (err) {
	var errorMessage = function () {
		var _p0 = err;
		switch (_p0.ctor) {
			case 'BadUrl':
				return A2(_elm_lang$core$Basics_ops['++'], 'Bad url: ', _p0._0);
			case 'Timeout':
				return 'Timed out';
			case 'NetworkError':
				return 'Network error';
			case 'BadStatus':
				return 'Bad status code';
			default:
				return 'Developer error';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'ERROR: ',
					A2(_elm_lang$core$Basics_ops['++'], errorMessage, '.'))),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$simpleBr = A2(
	_elm_lang$html$Html$br,
	{ctor: '[]'},
	{ctor: '[]'});
var _user$project$Main$simpleHtmlButton = F2(
	function (msg, text) {
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(msg),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(text),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$serverStatusView = function (serverStatus) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Song: ', serverStatus.song)),
			_1: {
				ctor: '::',
				_0: _user$project$Main$simpleBr,
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_elm_lang$core$Basics_ops['++'], 'Volume: ', serverStatus.volume)),
					_1: {
						ctor: '::',
						_0: _user$project$Main$simpleBr,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_elm_lang$core$Basics_ops['++'], 'State: ', serverStatus.state)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$emptyServerStatus = {volume: '100', song: '-', state: '-'};
var _user$project$Main$emptyModel = _elm_lang$core$Result$Ok(
	{serverStatus: _user$project$Main$emptyServerStatus, songInput: ''});
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$emptyModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$serverUrl = 'http://192.168.0.17:8000';
var _user$project$Main$ServerStatus = F3(
	function (a, b, c) {
		return {volume: a, song: b, state: c};
	});
var _user$project$Main$statusDecoder = A4(
	_elm_lang$core$Json_Decode$map3,
	_user$project$Main$ServerStatus,
	A2(_elm_lang$core$Json_Decode$field, 'volume', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'song', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'state', _elm_lang$core$Json_Decode$string));
var _user$project$Main$serverGetRequest = function (path) {
	return A2(
		_elm_lang$http$Http$get,
		A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$serverUrl, path),
		_user$project$Main$statusDecoder);
};
var _user$project$Main$statusRequest = _user$project$Main$serverGetRequest('/status');
var _user$project$Main$serverPostRequest = function (path) {
	return A3(_elm_lang$http$Http$post, path, _elm_lang$http$Http$emptyBody, _user$project$Main$statusDecoder);
};
var _user$project$Main$playRequest = function (songTitle) {
	var path = A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Main$serverUrl,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/play/',
			_elm_lang$http$Http$encodeUri(songTitle)));
	return _user$project$Main$serverPostRequest(path);
};
var _user$project$Main$increaseVolumeRequest = _user$project$Main$serverPostRequest('/increasevolume');
var _user$project$Main$decreaseVolumeRequest = _user$project$Main$serverPostRequest('/decreasevolume');
var _user$project$Main$togglePauseRequest = _user$project$Main$serverPostRequest('/togglepause');
var _user$project$Main$TogglePause = {ctor: 'TogglePause'};
var _user$project$Main$togglePauseButton = A2(_user$project$Main$simpleHtmlButton, _user$project$Main$TogglePause, 'Toggle Pause');
var _user$project$Main$DecreaseVolume = {ctor: 'DecreaseVolume'};
var _user$project$Main$decreaseVolumeButton = A2(_user$project$Main$simpleHtmlButton, _user$project$Main$DecreaseVolume, '-');
var _user$project$Main$IncraseVolume = {ctor: 'IncraseVolume'};
var _user$project$Main$increaseVolumeButton = A2(_user$project$Main$simpleHtmlButton, _user$project$Main$IncraseVolume, '+');
var _user$project$Main$volumeControl = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('Volume Control: '),
		_1: {
			ctor: '::',
			_0: _user$project$Main$increaseVolumeButton,
			_1: {
				ctor: '::',
				_0: _user$project$Main$decreaseVolumeButton,
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$Main$PlaySong = {ctor: 'PlaySong'};
var _user$project$Main$playButton = A2(_user$project$Main$simpleHtmlButton, _user$project$Main$PlaySong, 'Play');
var _user$project$Main$ServerResponse = function (a) {
	return {ctor: 'ServerResponse', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var sendRequest = function (request) {
			return A2(_elm_lang$http$Http$send, _user$project$Main$ServerResponse, request);
		};
		var updateOkModel = function (model) {
			var _p1 = msg;
			switch (_p1.ctor) {
				case 'UpdateSongInput':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Ok(
							_elm_lang$core$Native_Utils.update(
								model,
								{songInput: _p1._0})),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ServerResponse':
					if (_p1._0.ctor === 'Err') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Result$Err(_p1._0._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Result$Ok(
								_elm_lang$core$Native_Utils.update(
									model,
									{serverStatus: _p1._0._0})),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'UpdateStatus':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Ok(model),
						_1: A2(_elm_lang$http$Http$send, _user$project$Main$ServerResponse, _user$project$Main$statusRequest)
					};
				case 'PlaySong':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Ok(model),
						_1: sendRequest(
							_user$project$Main$playRequest(model.songInput))
					};
				case 'IncraseVolume':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Ok(model),
						_1: sendRequest(_user$project$Main$increaseVolumeRequest)
					};
				case 'DecreaseVolume':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Ok(model),
						_1: sendRequest(_user$project$Main$decreaseVolumeRequest)
					};
				default:
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Ok(model),
						_1: sendRequest(_user$project$Main$togglePauseRequest)
					};
			}
		};
		var _p2 = model;
		if (_p2.ctor === 'Err') {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			return updateOkModel(_p2._0);
		}
	});
var _user$project$Main$UpdateStatus = function (a) {
	return {ctor: 'UpdateStatus', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$UpdateStatus);
};
var _user$project$Main$UpdateSongInput = function (a) {
	return {ctor: 'UpdateSongInput', _0: a};
};
var _user$project$Main$view = function (model) {
	var _p3 = model;
	if (_p3.ctor === 'Ok') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateSongInput),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('Song Name'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _user$project$Main$simpleBr,
					_1: {
						ctor: '::',
						_0: _user$project$Main$playButton,
						_1: {
							ctor: '::',
							_0: _user$project$Main$simpleBr,
							_1: {
								ctor: '::',
								_0: _user$project$Main$togglePauseButton,
								_1: {
									ctor: '::',
									_0: _user$project$Main$simpleBr,
									_1: {
										ctor: '::',
										_0: _user$project$Main$volumeControl,
										_1: {
											ctor: '::',
											_0: _user$project$Main$simpleBr,
											_1: {
												ctor: '::',
												_0: _user$project$Main$serverStatusView(_p3._0.serverStatus),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	} else {
		return _user$project$Main$errorDiv(_p3._0);
	}
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions, view: _user$project$Main$view})();
